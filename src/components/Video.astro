---
export interface Props {
  url: string;
}

const isIFrame = (url: string) => {
  const regExp = /(?:<iframe[^>]*)(?:(?:\/>)|(?:>.*?<\/iframe>))/;
  const match = url.match(regExp);
  return match && match[0] ? match[0] : "";
};
const getYoutubeId = (url: string) => {
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);

  return match && match[2]?.length === 11 ? match[2] : "";
};

const getVimeoId = (url: string) => {
  const regExp =
    /^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/))?([0-9]+)/;

  const match = url.match(regExp);
  return match && match[5] ? match[5] : "";
};

const { url } = Astro.props;
const iFrame = isIFrame(url);

const youtubeId = getYoutubeId(url);
const vimeoId = getVimeoId(url);
const embedUrl = youtubeId
  ? `https://www.youtube.com/embed/${youtubeId}`
  : vimeoId
  ? `https://player.vimeo.com/video/${vimeoId}`
  : "";
---

{
  iFrame ? (
    <Fragment set:html={iFrame} />
  ) : embedUrl ? (
    <div class="w-full relative rounded aspect-video overflow-hidden my-4">
      {embedUrl && (
        <iframe
          src={embedUrl}
          width="100%"
          height="100%"
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
          }}
          allowfullscreen
          allow="picture-in-picture"
        />
      )}
    </div>
  ) : (
    <p>Invalid URL</p>
  )
}
